from django import forms
from django.db.models import Q
from . import models
from django.utils import timezone

# Form used to upload .ics calendar file generated by plan.polsl.pl
class ICSFileUploadForm(forms.Form):
    ics_file = forms.FileField(label="select .ics file")
    timetable_name = forms.CharField(max_length=50)

# Activity add/edit form
class ActivityForm(forms.ModelForm):
    #timetable = forms.ModelChoiceField(queryset=Timetable.objects.all(), required=False, help_text="Timetable")
    course = forms.ModelChoiceField(queryset=models.Course.objects.none(),
                                    required=False,
                                    help_text="Course")
    activity_type = forms.ModelChoiceField(queryset=models.Activity_type.objects.none(),
                                           required=False, help_text="Activity type")
    class Meta:
        model = models.Activity
        fields = ["time_start",
                  "time_end",
                  "description",
                  "course",
                  "activity_type"]

    def __init__(self, user, *args, get_time_now=False, **kwargs):
        super(ActivityForm, self).__init__(*args, **kwargs)

        # Dynamically set the queryset for the course field based on the user and timetables without a student_id
        if user:
            assigned_timetables = models.Timetable_assignment.objects.filter(Q(student_id=user.id) | Q(student_id=None))
        else:
            assigned_timetables = models.Timetable_assignment.objects.filter(student_id=None)
        user_courses = models.Course.objects.filter(timetable__id__in=assigned_timetables.values("timetable_id"))
        self.fields["course"].queryset = user_courses
        user_activities = models.Activity.objects.filter(timetable_id__in=assigned_timetables.values("timetable_id"))
        user_activity_types = models.Activity_type.objects.filter(id__in=user_activities.values("activity_type_id"))
        self.fields["activity_type"].queryset = user_activity_types

        if get_time_now:
            self.fields['time_start'].initial = timezone.now()
            self.fields['time_end'].initial = timezone.now()

class ActivityTypesForm(forms.Form):
    activity_types = forms.ModelMultipleChoiceField(
        queryset=models.Activity_type.objects.all(),
        widget=forms.CheckboxSelectMultiple,
        required=False,
    )

class EditActivityTypeForm(forms.ModelForm):
    class Meta:
        model = models.Activity_type
        fields = ["type_name",
                  "type_name_pl",
                  "type_description",
                  "type_color"]

class TeacherForm(forms.ModelForm):
    class Meta:
        model = models.Teacher
        fields = ["teacher_first_name",
                  "teacher_last_name",
                  "teacher_link",
                  "teacher_mail"]

class CourseForm(forms.ModelForm):
    class Meta:
        model = models.Course
        fields = ["course_name"]

class TimetableMergingForm(forms.Form):
    timetable_name = forms.CharField(max_length=50)
    timetable1 = forms.ModelChoiceField(queryset=models.Timetable.objects.none(),
                                        required=True, label="First timetable")
    timetable2 = forms.ModelChoiceField(queryset=models.Timetable.objects.none(),
                                        required=True, label="Second timetable")

    def __init__(self, user, *args, **kwargs):
        super(TimetableMergingForm, self).__init__(*args, **kwargs)

        # Dynamically set the queryset for timetable1 and timetable2 based on the user
        if user:
            assigned_timetables = models.Timetable_assignment.objects.filter(Q(student_id=user.id) | Q(student_id=None))
        else:
            assigned_timetables = models.Timetable_assignment.objects.filter(student_id=None)
        user_timetables = models.Timetable.objects.filter(id__in=assigned_timetables.values("timetable_id"))
        self.fields['timetable1'].queryset = user_timetables
        self.fields['timetable2'].queryset = user_timetables

class TimetableRenameForm(forms.ModelForm):
    class Meta:
        model = models.Timetable
        fields = ["timetable_name"]

class AddExistingTimetableForm(forms.Form):
     timetable_link = forms.UUIDField()